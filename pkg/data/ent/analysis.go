// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/analysis"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/topic"
)

// Analysis is the model entity for the Analysis schema.
type Analysis struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
	// AvgRating holds the value of the "avg_rating" field.
	AvgRating float64 `json:"avg_rating,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnalysisQuery when eager-loading is set.
	Edges          AnalysisEdges `json:"edges"`
	topic_analysis *int
}

// AnalysisEdges holds the relations/edges for other nodes in the graph.
type AnalysisEdges struct {
	// UnderTopicOf holds the value of the underTopicOf edge.
	UnderTopicOf *Topic `json:"underTopicOf,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UnderTopicOfOrErr returns the UnderTopicOf value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnalysisEdges) UnderTopicOfOrErr() (*Topic, error) {
	if e.loadedTypes[0] {
		if e.UnderTopicOf == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: topic.Label}
		}
		return e.UnderTopicOf, nil
	}
	return nil, &NotLoadedError{edge: "underTopicOf"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Analysis) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case analysis.FieldAvgRating:
			values[i] = new(sql.NullFloat64)
		case analysis.FieldID, analysis.FieldTopicID:
			values[i] = new(sql.NullInt64)
		case analysis.ForeignKeys[0]: // topic_analysis
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Analysis", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Analysis fields.
func (a *Analysis) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case analysis.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case analysis.FieldTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				a.TopicID = int(value.Int64)
			}
		case analysis.FieldAvgRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_rating", values[i])
			} else if value.Valid {
				a.AvgRating = value.Float64
			}
		case analysis.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field topic_analysis", value)
			} else if value.Valid {
				a.topic_analysis = new(int)
				*a.topic_analysis = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUnderTopicOf queries the "underTopicOf" edge of the Analysis entity.
func (a *Analysis) QueryUnderTopicOf() *TopicQuery {
	return (&AnalysisClient{config: a.config}).QueryUnderTopicOf(a)
}

// Update returns a builder for updating this Analysis.
// Note that you need to call Analysis.Unwrap() before calling this method if this Analysis
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Analysis) Update() *AnalysisUpdateOne {
	return (&AnalysisClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Analysis entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Analysis) Unwrap() *Analysis {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Analysis is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Analysis) String() string {
	var builder strings.Builder
	builder.WriteString("Analysis(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("topic_id=")
	builder.WriteString(fmt.Sprintf("%v", a.TopicID))
	builder.WriteString(", ")
	builder.WriteString("avg_rating=")
	builder.WriteString(fmt.Sprintf("%v", a.AvgRating))
	builder.WriteByte(')')
	return builder.String()
}

// Analyses is a parsable slice of Analysis.
type Analyses []*Analysis

func (a Analyses) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
