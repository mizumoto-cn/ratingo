// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/analysis"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/predicate"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/topic"
)

// AnalysisUpdate is the builder for updating Analysis entities.
type AnalysisUpdate struct {
	config
	hooks    []Hook
	mutation *AnalysisMutation
}

// Where appends a list predicates to the AnalysisUpdate builder.
func (au *AnalysisUpdate) Where(ps ...predicate.Analysis) *AnalysisUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTopicID sets the "topic_id" field.
func (au *AnalysisUpdate) SetTopicID(i int) *AnalysisUpdate {
	au.mutation.ResetTopicID()
	au.mutation.SetTopicID(i)
	return au
}

// AddTopicID adds i to the "topic_id" field.
func (au *AnalysisUpdate) AddTopicID(i int) *AnalysisUpdate {
	au.mutation.AddTopicID(i)
	return au
}

// SetAvgRating sets the "avg_rating" field.
func (au *AnalysisUpdate) SetAvgRating(f float64) *AnalysisUpdate {
	au.mutation.ResetAvgRating()
	au.mutation.SetAvgRating(f)
	return au
}

// AddAvgRating adds f to the "avg_rating" field.
func (au *AnalysisUpdate) AddAvgRating(f float64) *AnalysisUpdate {
	au.mutation.AddAvgRating(f)
	return au
}

// SetUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by ID.
func (au *AnalysisUpdate) SetUnderTopicOfID(id int) *AnalysisUpdate {
	au.mutation.SetUnderTopicOfID(id)
	return au
}

// SetNillableUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by ID if the given value is not nil.
func (au *AnalysisUpdate) SetNillableUnderTopicOfID(id *int) *AnalysisUpdate {
	if id != nil {
		au = au.SetUnderTopicOfID(*id)
	}
	return au
}

// SetUnderTopicOf sets the "underTopicOf" edge to the Topic entity.
func (au *AnalysisUpdate) SetUnderTopicOf(t *Topic) *AnalysisUpdate {
	return au.SetUnderTopicOfID(t.ID)
}

// Mutation returns the AnalysisMutation object of the builder.
func (au *AnalysisUpdate) Mutation() *AnalysisMutation {
	return au.mutation
}

// ClearUnderTopicOf clears the "underTopicOf" edge to the Topic entity.
func (au *AnalysisUpdate) ClearUnderTopicOf() *AnalysisUpdate {
	au.mutation.ClearUnderTopicOf()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnalysisUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnalysisMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnalysisUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnalysisUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnalysisUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AnalysisUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   analysis.Table,
			Columns: analysis.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: analysis.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.TopicID(); ok {
		_spec.SetField(analysis.FieldTopicID, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedTopicID(); ok {
		_spec.AddField(analysis.FieldTopicID, field.TypeInt, value)
	}
	if value, ok := au.mutation.AvgRating(); ok {
		_spec.SetField(analysis.FieldAvgRating, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedAvgRating(); ok {
		_spec.AddField(analysis.FieldAvgRating, field.TypeFloat64, value)
	}
	if au.mutation.UnderTopicOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   analysis.UnderTopicOfTable,
			Columns: []string{analysis.UnderTopicOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UnderTopicOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   analysis.UnderTopicOfTable,
			Columns: []string{analysis.UnderTopicOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{analysis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AnalysisUpdateOne is the builder for updating a single Analysis entity.
type AnalysisUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnalysisMutation
}

// SetTopicID sets the "topic_id" field.
func (auo *AnalysisUpdateOne) SetTopicID(i int) *AnalysisUpdateOne {
	auo.mutation.ResetTopicID()
	auo.mutation.SetTopicID(i)
	return auo
}

// AddTopicID adds i to the "topic_id" field.
func (auo *AnalysisUpdateOne) AddTopicID(i int) *AnalysisUpdateOne {
	auo.mutation.AddTopicID(i)
	return auo
}

// SetAvgRating sets the "avg_rating" field.
func (auo *AnalysisUpdateOne) SetAvgRating(f float64) *AnalysisUpdateOne {
	auo.mutation.ResetAvgRating()
	auo.mutation.SetAvgRating(f)
	return auo
}

// AddAvgRating adds f to the "avg_rating" field.
func (auo *AnalysisUpdateOne) AddAvgRating(f float64) *AnalysisUpdateOne {
	auo.mutation.AddAvgRating(f)
	return auo
}

// SetUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by ID.
func (auo *AnalysisUpdateOne) SetUnderTopicOfID(id int) *AnalysisUpdateOne {
	auo.mutation.SetUnderTopicOfID(id)
	return auo
}

// SetNillableUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by ID if the given value is not nil.
func (auo *AnalysisUpdateOne) SetNillableUnderTopicOfID(id *int) *AnalysisUpdateOne {
	if id != nil {
		auo = auo.SetUnderTopicOfID(*id)
	}
	return auo
}

// SetUnderTopicOf sets the "underTopicOf" edge to the Topic entity.
func (auo *AnalysisUpdateOne) SetUnderTopicOf(t *Topic) *AnalysisUpdateOne {
	return auo.SetUnderTopicOfID(t.ID)
}

// Mutation returns the AnalysisMutation object of the builder.
func (auo *AnalysisUpdateOne) Mutation() *AnalysisMutation {
	return auo.mutation
}

// ClearUnderTopicOf clears the "underTopicOf" edge to the Topic entity.
func (auo *AnalysisUpdateOne) ClearUnderTopicOf() *AnalysisUpdateOne {
	auo.mutation.ClearUnderTopicOf()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnalysisUpdateOne) Select(field string, fields ...string) *AnalysisUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Analysis entity.
func (auo *AnalysisUpdateOne) Save(ctx context.Context) (*Analysis, error) {
	var (
		err  error
		node *Analysis
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnalysisMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Analysis)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AnalysisMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnalysisUpdateOne) SaveX(ctx context.Context) *Analysis {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnalysisUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnalysisUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AnalysisUpdateOne) sqlSave(ctx context.Context) (_node *Analysis, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   analysis.Table,
			Columns: analysis.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: analysis.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Analysis.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, analysis.FieldID)
		for _, f := range fields {
			if !analysis.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != analysis.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.TopicID(); ok {
		_spec.SetField(analysis.FieldTopicID, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedTopicID(); ok {
		_spec.AddField(analysis.FieldTopicID, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AvgRating(); ok {
		_spec.SetField(analysis.FieldAvgRating, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedAvgRating(); ok {
		_spec.AddField(analysis.FieldAvgRating, field.TypeFloat64, value)
	}
	if auo.mutation.UnderTopicOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   analysis.UnderTopicOfTable,
			Columns: []string{analysis.UnderTopicOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UnderTopicOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   analysis.UnderTopicOfTable,
			Columns: []string{analysis.UnderTopicOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Analysis{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{analysis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
