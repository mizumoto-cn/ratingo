// Code generated by ent, DO NOT EDIT.

package analysis

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TopicID applies equality check predicate on the "topic_id" field. It's identical to TopicIDEQ.
func TopicID(v int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopicID), v))
	})
}

// AvgRating applies equality check predicate on the "avg_rating" field. It's identical to AvgRatingEQ.
func AvgRating(v float64) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvgRating), v))
	})
}

// TopicIDEQ applies the EQ predicate on the "topic_id" field.
func TopicIDEQ(v int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopicID), v))
	})
}

// TopicIDNEQ applies the NEQ predicate on the "topic_id" field.
func TopicIDNEQ(v int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTopicID), v))
	})
}

// TopicIDIn applies the In predicate on the "topic_id" field.
func TopicIDIn(vs ...int) predicate.Analysis {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTopicID), v...))
	})
}

// TopicIDNotIn applies the NotIn predicate on the "topic_id" field.
func TopicIDNotIn(vs ...int) predicate.Analysis {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTopicID), v...))
	})
}

// TopicIDGT applies the GT predicate on the "topic_id" field.
func TopicIDGT(v int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTopicID), v))
	})
}

// TopicIDGTE applies the GTE predicate on the "topic_id" field.
func TopicIDGTE(v int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTopicID), v))
	})
}

// TopicIDLT applies the LT predicate on the "topic_id" field.
func TopicIDLT(v int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTopicID), v))
	})
}

// TopicIDLTE applies the LTE predicate on the "topic_id" field.
func TopicIDLTE(v int) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTopicID), v))
	})
}

// AvgRatingEQ applies the EQ predicate on the "avg_rating" field.
func AvgRatingEQ(v float64) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvgRating), v))
	})
}

// AvgRatingNEQ applies the NEQ predicate on the "avg_rating" field.
func AvgRatingNEQ(v float64) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvgRating), v))
	})
}

// AvgRatingIn applies the In predicate on the "avg_rating" field.
func AvgRatingIn(vs ...float64) predicate.Analysis {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvgRating), v...))
	})
}

// AvgRatingNotIn applies the NotIn predicate on the "avg_rating" field.
func AvgRatingNotIn(vs ...float64) predicate.Analysis {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvgRating), v...))
	})
}

// AvgRatingGT applies the GT predicate on the "avg_rating" field.
func AvgRatingGT(v float64) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvgRating), v))
	})
}

// AvgRatingGTE applies the GTE predicate on the "avg_rating" field.
func AvgRatingGTE(v float64) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvgRating), v))
	})
}

// AvgRatingLT applies the LT predicate on the "avg_rating" field.
func AvgRatingLT(v float64) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvgRating), v))
	})
}

// AvgRatingLTE applies the LTE predicate on the "avg_rating" field.
func AvgRatingLTE(v float64) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvgRating), v))
	})
}

// HasUnderTopicOf applies the HasEdge predicate on the "underTopicOf" edge.
func HasUnderTopicOf() predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UnderTopicOfTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UnderTopicOfTable, UnderTopicOfColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUnderTopicOfWith applies the HasEdge predicate on the "underTopicOf" edge with a given conditions (other predicates).
func HasUnderTopicOfWith(preds ...predicate.Topic) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UnderTopicOfInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UnderTopicOfTable, UnderTopicOfColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Analysis) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Analysis) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Analysis) predicate.Analysis {
	return predicate.Analysis(func(s *sql.Selector) {
		p(s.Not())
	})
}
