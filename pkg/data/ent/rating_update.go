// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/predicate"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/rating"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/topic"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/user"
)

// RatingUpdate is the builder for updating Rating entities.
type RatingUpdate struct {
	config
	hooks    []Hook
	mutation *RatingMutation
}

// Where appends a list predicates to the RatingUpdate builder.
func (ru *RatingUpdate) Where(ps ...predicate.Rating) *RatingUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUserID sets the "user_id" field.
func (ru *RatingUpdate) SetUserID(i int) *RatingUpdate {
	ru.mutation.ResetUserID()
	ru.mutation.SetUserID(i)
	return ru
}

// AddUserID adds i to the "user_id" field.
func (ru *RatingUpdate) AddUserID(i int) *RatingUpdate {
	ru.mutation.AddUserID(i)
	return ru
}

// SetTopicID sets the "topic_id" field.
func (ru *RatingUpdate) SetTopicID(i int) *RatingUpdate {
	ru.mutation.ResetTopicID()
	ru.mutation.SetTopicID(i)
	return ru
}

// AddTopicID adds i to the "topic_id" field.
func (ru *RatingUpdate) AddTopicID(i int) *RatingUpdate {
	ru.mutation.AddTopicID(i)
	return ru
}

// SetRating sets the "rating" field.
func (ru *RatingUpdate) SetRating(f float64) *RatingUpdate {
	ru.mutation.ResetRating()
	ru.mutation.SetRating(f)
	return ru
}

// AddRating adds f to the "rating" field.
func (ru *RatingUpdate) AddRating(f float64) *RatingUpdate {
	ru.mutation.AddRating(f)
	return ru
}

// SetComment sets the "comment" field.
func (ru *RatingUpdate) SetComment(s string) *RatingUpdate {
	ru.mutation.SetComment(s)
	return ru
}

// SetRatedByID sets the "ratedBy" edge to the User entity by ID.
func (ru *RatingUpdate) SetRatedByID(id int) *RatingUpdate {
	ru.mutation.SetRatedByID(id)
	return ru
}

// SetNillableRatedByID sets the "ratedBy" edge to the User entity by ID if the given value is not nil.
func (ru *RatingUpdate) SetNillableRatedByID(id *int) *RatingUpdate {
	if id != nil {
		ru = ru.SetRatedByID(*id)
	}
	return ru
}

// SetRatedBy sets the "ratedBy" edge to the User entity.
func (ru *RatingUpdate) SetRatedBy(u *User) *RatingUpdate {
	return ru.SetRatedByID(u.ID)
}

// SetUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by ID.
func (ru *RatingUpdate) SetUnderTopicOfID(id int) *RatingUpdate {
	ru.mutation.SetUnderTopicOfID(id)
	return ru
}

// SetNillableUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by ID if the given value is not nil.
func (ru *RatingUpdate) SetNillableUnderTopicOfID(id *int) *RatingUpdate {
	if id != nil {
		ru = ru.SetUnderTopicOfID(*id)
	}
	return ru
}

// SetUnderTopicOf sets the "underTopicOf" edge to the Topic entity.
func (ru *RatingUpdate) SetUnderTopicOf(t *Topic) *RatingUpdate {
	return ru.SetUnderTopicOfID(t.ID)
}

// Mutation returns the RatingMutation object of the builder.
func (ru *RatingUpdate) Mutation() *RatingMutation {
	return ru.mutation
}

// ClearRatedBy clears the "ratedBy" edge to the User entity.
func (ru *RatingUpdate) ClearRatedBy() *RatingUpdate {
	ru.mutation.ClearRatedBy()
	return ru
}

// ClearUnderTopicOf clears the "underTopicOf" edge to the Topic entity.
func (ru *RatingUpdate) ClearUnderTopicOf() *RatingUpdate {
	ru.mutation.ClearUnderTopicOf()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RatingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RatingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RatingUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RatingUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RatingUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RatingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rating.Table,
			Columns: rating.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rating.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UserID(); ok {
		_spec.SetField(rating.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedUserID(); ok {
		_spec.AddField(rating.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.TopicID(); ok {
		_spec.SetField(rating.FieldTopicID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedTopicID(); ok {
		_spec.AddField(rating.FieldTopicID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Rating(); ok {
		_spec.SetField(rating.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedRating(); ok {
		_spec.AddField(rating.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.Comment(); ok {
		_spec.SetField(rating.FieldComment, field.TypeString, value)
	}
	if ru.mutation.RatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.RatedByTable,
			Columns: []string{rating.RatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.RatedByTable,
			Columns: []string{rating.RatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UnderTopicOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.UnderTopicOfTable,
			Columns: []string{rating.UnderTopicOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UnderTopicOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.UnderTopicOfTable,
			Columns: []string{rating.UnderTopicOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rating.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RatingUpdateOne is the builder for updating a single Rating entity.
type RatingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RatingMutation
}

// SetUserID sets the "user_id" field.
func (ruo *RatingUpdateOne) SetUserID(i int) *RatingUpdateOne {
	ruo.mutation.ResetUserID()
	ruo.mutation.SetUserID(i)
	return ruo
}

// AddUserID adds i to the "user_id" field.
func (ruo *RatingUpdateOne) AddUserID(i int) *RatingUpdateOne {
	ruo.mutation.AddUserID(i)
	return ruo
}

// SetTopicID sets the "topic_id" field.
func (ruo *RatingUpdateOne) SetTopicID(i int) *RatingUpdateOne {
	ruo.mutation.ResetTopicID()
	ruo.mutation.SetTopicID(i)
	return ruo
}

// AddTopicID adds i to the "topic_id" field.
func (ruo *RatingUpdateOne) AddTopicID(i int) *RatingUpdateOne {
	ruo.mutation.AddTopicID(i)
	return ruo
}

// SetRating sets the "rating" field.
func (ruo *RatingUpdateOne) SetRating(f float64) *RatingUpdateOne {
	ruo.mutation.ResetRating()
	ruo.mutation.SetRating(f)
	return ruo
}

// AddRating adds f to the "rating" field.
func (ruo *RatingUpdateOne) AddRating(f float64) *RatingUpdateOne {
	ruo.mutation.AddRating(f)
	return ruo
}

// SetComment sets the "comment" field.
func (ruo *RatingUpdateOne) SetComment(s string) *RatingUpdateOne {
	ruo.mutation.SetComment(s)
	return ruo
}

// SetRatedByID sets the "ratedBy" edge to the User entity by ID.
func (ruo *RatingUpdateOne) SetRatedByID(id int) *RatingUpdateOne {
	ruo.mutation.SetRatedByID(id)
	return ruo
}

// SetNillableRatedByID sets the "ratedBy" edge to the User entity by ID if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableRatedByID(id *int) *RatingUpdateOne {
	if id != nil {
		ruo = ruo.SetRatedByID(*id)
	}
	return ruo
}

// SetRatedBy sets the "ratedBy" edge to the User entity.
func (ruo *RatingUpdateOne) SetRatedBy(u *User) *RatingUpdateOne {
	return ruo.SetRatedByID(u.ID)
}

// SetUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by ID.
func (ruo *RatingUpdateOne) SetUnderTopicOfID(id int) *RatingUpdateOne {
	ruo.mutation.SetUnderTopicOfID(id)
	return ruo
}

// SetNillableUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by ID if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableUnderTopicOfID(id *int) *RatingUpdateOne {
	if id != nil {
		ruo = ruo.SetUnderTopicOfID(*id)
	}
	return ruo
}

// SetUnderTopicOf sets the "underTopicOf" edge to the Topic entity.
func (ruo *RatingUpdateOne) SetUnderTopicOf(t *Topic) *RatingUpdateOne {
	return ruo.SetUnderTopicOfID(t.ID)
}

// Mutation returns the RatingMutation object of the builder.
func (ruo *RatingUpdateOne) Mutation() *RatingMutation {
	return ruo.mutation
}

// ClearRatedBy clears the "ratedBy" edge to the User entity.
func (ruo *RatingUpdateOne) ClearRatedBy() *RatingUpdateOne {
	ruo.mutation.ClearRatedBy()
	return ruo
}

// ClearUnderTopicOf clears the "underTopicOf" edge to the Topic entity.
func (ruo *RatingUpdateOne) ClearUnderTopicOf() *RatingUpdateOne {
	ruo.mutation.ClearUnderTopicOf()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RatingUpdateOne) Select(field string, fields ...string) *RatingUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rating entity.
func (ruo *RatingUpdateOne) Save(ctx context.Context) (*Rating, error) {
	var (
		err  error
		node *Rating
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RatingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Rating)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RatingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RatingUpdateOne) SaveX(ctx context.Context) *Rating {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RatingUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RatingUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RatingUpdateOne) sqlSave(ctx context.Context) (_node *Rating, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rating.Table,
			Columns: rating.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rating.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rating.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rating.FieldID)
		for _, f := range fields {
			if !rating.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rating.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UserID(); ok {
		_spec.SetField(rating.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedUserID(); ok {
		_spec.AddField(rating.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.TopicID(); ok {
		_spec.SetField(rating.FieldTopicID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedTopicID(); ok {
		_spec.AddField(rating.FieldTopicID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Rating(); ok {
		_spec.SetField(rating.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedRating(); ok {
		_spec.AddField(rating.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.Comment(); ok {
		_spec.SetField(rating.FieldComment, field.TypeString, value)
	}
	if ruo.mutation.RatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.RatedByTable,
			Columns: []string{rating.RatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.RatedByTable,
			Columns: []string{rating.RatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UnderTopicOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.UnderTopicOfTable,
			Columns: []string{rating.UnderTopicOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UnderTopicOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.UnderTopicOfTable,
			Columns: []string{rating.UnderTopicOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rating{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rating.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
