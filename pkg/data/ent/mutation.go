// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/mizumoto-cn/ratingo/pkg/data/ent/analysis"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/predicate"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/rating"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/topic"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnalysis = "Analysis"
	TypeRating   = "Rating"
	TypeTopic    = "Topic"
	TypeUser     = "User"
)

// AnalysisMutation represents an operation that mutates the Analysis nodes in the graph.
type AnalysisMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	topic_id            *int
	addtopic_id         *int
	avg_rating          *float64
	addavg_rating       *float64
	clearedFields       map[string]struct{}
	underTopicOf        *int
	clearedunderTopicOf bool
	done                bool
	oldValue            func(context.Context) (*Analysis, error)
	predicates          []predicate.Analysis
}

var _ ent.Mutation = (*AnalysisMutation)(nil)

// analysisOption allows management of the mutation configuration using functional options.
type analysisOption func(*AnalysisMutation)

// newAnalysisMutation creates new mutation for the Analysis entity.
func newAnalysisMutation(c config, op Op, opts ...analysisOption) *AnalysisMutation {
	m := &AnalysisMutation{
		config:        c,
		op:            op,
		typ:           TypeAnalysis,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnalysisID sets the ID field of the mutation.
func withAnalysisID(id int) analysisOption {
	return func(m *AnalysisMutation) {
		var (
			err   error
			once  sync.Once
			value *Analysis
		)
		m.oldValue = func(ctx context.Context) (*Analysis, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Analysis.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnalysis sets the old Analysis of the mutation.
func withAnalysis(node *Analysis) analysisOption {
	return func(m *AnalysisMutation) {
		m.oldValue = func(context.Context) (*Analysis, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnalysisMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnalysisMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Analysis entities.
func (m *AnalysisMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnalysisMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnalysisMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Analysis.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTopicID sets the "topic_id" field.
func (m *AnalysisMutation) SetTopicID(i int) {
	m.topic_id = &i
	m.addtopic_id = nil
}

// TopicID returns the value of the "topic_id" field in the mutation.
func (m *AnalysisMutation) TopicID() (r int, exists bool) {
	v := m.topic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old "topic_id" field's value of the Analysis entity.
// If the Analysis object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnalysisMutation) OldTopicID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// AddTopicID adds i to the "topic_id" field.
func (m *AnalysisMutation) AddTopicID(i int) {
	if m.addtopic_id != nil {
		*m.addtopic_id += i
	} else {
		m.addtopic_id = &i
	}
}

// AddedTopicID returns the value that was added to the "topic_id" field in this mutation.
func (m *AnalysisMutation) AddedTopicID() (r int, exists bool) {
	v := m.addtopic_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTopicID resets all changes to the "topic_id" field.
func (m *AnalysisMutation) ResetTopicID() {
	m.topic_id = nil
	m.addtopic_id = nil
}

// SetAvgRating sets the "avg_rating" field.
func (m *AnalysisMutation) SetAvgRating(f float64) {
	m.avg_rating = &f
	m.addavg_rating = nil
}

// AvgRating returns the value of the "avg_rating" field in the mutation.
func (m *AnalysisMutation) AvgRating() (r float64, exists bool) {
	v := m.avg_rating
	if v == nil {
		return
	}
	return *v, true
}

// OldAvgRating returns the old "avg_rating" field's value of the Analysis entity.
// If the Analysis object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnalysisMutation) OldAvgRating(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvgRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvgRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvgRating: %w", err)
	}
	return oldValue.AvgRating, nil
}

// AddAvgRating adds f to the "avg_rating" field.
func (m *AnalysisMutation) AddAvgRating(f float64) {
	if m.addavg_rating != nil {
		*m.addavg_rating += f
	} else {
		m.addavg_rating = &f
	}
}

// AddedAvgRating returns the value that was added to the "avg_rating" field in this mutation.
func (m *AnalysisMutation) AddedAvgRating() (r float64, exists bool) {
	v := m.addavg_rating
	if v == nil {
		return
	}
	return *v, true
}

// ResetAvgRating resets all changes to the "avg_rating" field.
func (m *AnalysisMutation) ResetAvgRating() {
	m.avg_rating = nil
	m.addavg_rating = nil
}

// SetUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by id.
func (m *AnalysisMutation) SetUnderTopicOfID(id int) {
	m.underTopicOf = &id
}

// ClearUnderTopicOf clears the "underTopicOf" edge to the Topic entity.
func (m *AnalysisMutation) ClearUnderTopicOf() {
	m.clearedunderTopicOf = true
}

// UnderTopicOfCleared reports if the "underTopicOf" edge to the Topic entity was cleared.
func (m *AnalysisMutation) UnderTopicOfCleared() bool {
	return m.clearedunderTopicOf
}

// UnderTopicOfID returns the "underTopicOf" edge ID in the mutation.
func (m *AnalysisMutation) UnderTopicOfID() (id int, exists bool) {
	if m.underTopicOf != nil {
		return *m.underTopicOf, true
	}
	return
}

// UnderTopicOfIDs returns the "underTopicOf" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UnderTopicOfID instead. It exists only for internal usage by the builders.
func (m *AnalysisMutation) UnderTopicOfIDs() (ids []int) {
	if id := m.underTopicOf; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUnderTopicOf resets all changes to the "underTopicOf" edge.
func (m *AnalysisMutation) ResetUnderTopicOf() {
	m.underTopicOf = nil
	m.clearedunderTopicOf = false
}

// Where appends a list predicates to the AnalysisMutation builder.
func (m *AnalysisMutation) Where(ps ...predicate.Analysis) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AnalysisMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Analysis).
func (m *AnalysisMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnalysisMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.topic_id != nil {
		fields = append(fields, analysis.FieldTopicID)
	}
	if m.avg_rating != nil {
		fields = append(fields, analysis.FieldAvgRating)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnalysisMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case analysis.FieldTopicID:
		return m.TopicID()
	case analysis.FieldAvgRating:
		return m.AvgRating()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnalysisMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case analysis.FieldTopicID:
		return m.OldTopicID(ctx)
	case analysis.FieldAvgRating:
		return m.OldAvgRating(ctx)
	}
	return nil, fmt.Errorf("unknown Analysis field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnalysisMutation) SetField(name string, value ent.Value) error {
	switch name {
	case analysis.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	case analysis.FieldAvgRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvgRating(v)
		return nil
	}
	return fmt.Errorf("unknown Analysis field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnalysisMutation) AddedFields() []string {
	var fields []string
	if m.addtopic_id != nil {
		fields = append(fields, analysis.FieldTopicID)
	}
	if m.addavg_rating != nil {
		fields = append(fields, analysis.FieldAvgRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnalysisMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case analysis.FieldTopicID:
		return m.AddedTopicID()
	case analysis.FieldAvgRating:
		return m.AddedAvgRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnalysisMutation) AddField(name string, value ent.Value) error {
	switch name {
	case analysis.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTopicID(v)
		return nil
	case analysis.FieldAvgRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAvgRating(v)
		return nil
	}
	return fmt.Errorf("unknown Analysis numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnalysisMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnalysisMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnalysisMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Analysis nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnalysisMutation) ResetField(name string) error {
	switch name {
	case analysis.FieldTopicID:
		m.ResetTopicID()
		return nil
	case analysis.FieldAvgRating:
		m.ResetAvgRating()
		return nil
	}
	return fmt.Errorf("unknown Analysis field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnalysisMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.underTopicOf != nil {
		edges = append(edges, analysis.EdgeUnderTopicOf)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnalysisMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case analysis.EdgeUnderTopicOf:
		if id := m.underTopicOf; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnalysisMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnalysisMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnalysisMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedunderTopicOf {
		edges = append(edges, analysis.EdgeUnderTopicOf)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnalysisMutation) EdgeCleared(name string) bool {
	switch name {
	case analysis.EdgeUnderTopicOf:
		return m.clearedunderTopicOf
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnalysisMutation) ClearEdge(name string) error {
	switch name {
	case analysis.EdgeUnderTopicOf:
		m.ClearUnderTopicOf()
		return nil
	}
	return fmt.Errorf("unknown Analysis unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnalysisMutation) ResetEdge(name string) error {
	switch name {
	case analysis.EdgeUnderTopicOf:
		m.ResetUnderTopicOf()
		return nil
	}
	return fmt.Errorf("unknown Analysis edge %s", name)
}

// RatingMutation represents an operation that mutates the Rating nodes in the graph.
type RatingMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	user_id             *int
	adduser_id          *int
	topic_id            *int
	addtopic_id         *int
	rating              *float64
	addrating           *float64
	comment             *string
	clearedFields       map[string]struct{}
	ratedBy             *int
	clearedratedBy      bool
	underTopicOf        *int
	clearedunderTopicOf bool
	done                bool
	oldValue            func(context.Context) (*Rating, error)
	predicates          []predicate.Rating
}

var _ ent.Mutation = (*RatingMutation)(nil)

// ratingOption allows management of the mutation configuration using functional options.
type ratingOption func(*RatingMutation)

// newRatingMutation creates new mutation for the Rating entity.
func newRatingMutation(c config, op Op, opts ...ratingOption) *RatingMutation {
	m := &RatingMutation{
		config:        c,
		op:            op,
		typ:           TypeRating,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRatingID sets the ID field of the mutation.
func withRatingID(id int) ratingOption {
	return func(m *RatingMutation) {
		var (
			err   error
			once  sync.Once
			value *Rating
		)
		m.oldValue = func(ctx context.Context) (*Rating, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rating.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRating sets the old Rating of the mutation.
func withRating(node *Rating) ratingOption {
	return func(m *RatingMutation) {
		m.oldValue = func(context.Context) (*Rating, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RatingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RatingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Rating entities.
func (m *RatingMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RatingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RatingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rating.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *RatingMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *RatingMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Rating entity.
// If the Rating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RatingMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *RatingMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *RatingMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *RatingMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetTopicID sets the "topic_id" field.
func (m *RatingMutation) SetTopicID(i int) {
	m.topic_id = &i
	m.addtopic_id = nil
}

// TopicID returns the value of the "topic_id" field in the mutation.
func (m *RatingMutation) TopicID() (r int, exists bool) {
	v := m.topic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old "topic_id" field's value of the Rating entity.
// If the Rating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RatingMutation) OldTopicID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// AddTopicID adds i to the "topic_id" field.
func (m *RatingMutation) AddTopicID(i int) {
	if m.addtopic_id != nil {
		*m.addtopic_id += i
	} else {
		m.addtopic_id = &i
	}
}

// AddedTopicID returns the value that was added to the "topic_id" field in this mutation.
func (m *RatingMutation) AddedTopicID() (r int, exists bool) {
	v := m.addtopic_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTopicID resets all changes to the "topic_id" field.
func (m *RatingMutation) ResetTopicID() {
	m.topic_id = nil
	m.addtopic_id = nil
}

// SetRating sets the "rating" field.
func (m *RatingMutation) SetRating(f float64) {
	m.rating = &f
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *RatingMutation) Rating() (r float64, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the Rating entity.
// If the Rating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RatingMutation) OldRating(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds f to the "rating" field.
func (m *RatingMutation) AddRating(f float64) {
	if m.addrating != nil {
		*m.addrating += f
	} else {
		m.addrating = &f
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *RatingMutation) AddedRating() (r float64, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *RatingMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetComment sets the "comment" field.
func (m *RatingMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *RatingMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Rating entity.
// If the Rating object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RatingMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *RatingMutation) ResetComment() {
	m.comment = nil
}

// SetRatedByID sets the "ratedBy" edge to the User entity by id.
func (m *RatingMutation) SetRatedByID(id int) {
	m.ratedBy = &id
}

// ClearRatedBy clears the "ratedBy" edge to the User entity.
func (m *RatingMutation) ClearRatedBy() {
	m.clearedratedBy = true
}

// RatedByCleared reports if the "ratedBy" edge to the User entity was cleared.
func (m *RatingMutation) RatedByCleared() bool {
	return m.clearedratedBy
}

// RatedByID returns the "ratedBy" edge ID in the mutation.
func (m *RatingMutation) RatedByID() (id int, exists bool) {
	if m.ratedBy != nil {
		return *m.ratedBy, true
	}
	return
}

// RatedByIDs returns the "ratedBy" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RatedByID instead. It exists only for internal usage by the builders.
func (m *RatingMutation) RatedByIDs() (ids []int) {
	if id := m.ratedBy; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRatedBy resets all changes to the "ratedBy" edge.
func (m *RatingMutation) ResetRatedBy() {
	m.ratedBy = nil
	m.clearedratedBy = false
}

// SetUnderTopicOfID sets the "underTopicOf" edge to the Topic entity by id.
func (m *RatingMutation) SetUnderTopicOfID(id int) {
	m.underTopicOf = &id
}

// ClearUnderTopicOf clears the "underTopicOf" edge to the Topic entity.
func (m *RatingMutation) ClearUnderTopicOf() {
	m.clearedunderTopicOf = true
}

// UnderTopicOfCleared reports if the "underTopicOf" edge to the Topic entity was cleared.
func (m *RatingMutation) UnderTopicOfCleared() bool {
	return m.clearedunderTopicOf
}

// UnderTopicOfID returns the "underTopicOf" edge ID in the mutation.
func (m *RatingMutation) UnderTopicOfID() (id int, exists bool) {
	if m.underTopicOf != nil {
		return *m.underTopicOf, true
	}
	return
}

// UnderTopicOfIDs returns the "underTopicOf" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UnderTopicOfID instead. It exists only for internal usage by the builders.
func (m *RatingMutation) UnderTopicOfIDs() (ids []int) {
	if id := m.underTopicOf; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUnderTopicOf resets all changes to the "underTopicOf" edge.
func (m *RatingMutation) ResetUnderTopicOf() {
	m.underTopicOf = nil
	m.clearedunderTopicOf = false
}

// Where appends a list predicates to the RatingMutation builder.
func (m *RatingMutation) Where(ps ...predicate.Rating) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RatingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Rating).
func (m *RatingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RatingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user_id != nil {
		fields = append(fields, rating.FieldUserID)
	}
	if m.topic_id != nil {
		fields = append(fields, rating.FieldTopicID)
	}
	if m.rating != nil {
		fields = append(fields, rating.FieldRating)
	}
	if m.comment != nil {
		fields = append(fields, rating.FieldComment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RatingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rating.FieldUserID:
		return m.UserID()
	case rating.FieldTopicID:
		return m.TopicID()
	case rating.FieldRating:
		return m.Rating()
	case rating.FieldComment:
		return m.Comment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RatingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rating.FieldUserID:
		return m.OldUserID(ctx)
	case rating.FieldTopicID:
		return m.OldTopicID(ctx)
	case rating.FieldRating:
		return m.OldRating(ctx)
	case rating.FieldComment:
		return m.OldComment(ctx)
	}
	return nil, fmt.Errorf("unknown Rating field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RatingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rating.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case rating.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	case rating.FieldRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case rating.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	}
	return fmt.Errorf("unknown Rating field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RatingMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, rating.FieldUserID)
	}
	if m.addtopic_id != nil {
		fields = append(fields, rating.FieldTopicID)
	}
	if m.addrating != nil {
		fields = append(fields, rating.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RatingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rating.FieldUserID:
		return m.AddedUserID()
	case rating.FieldTopicID:
		return m.AddedTopicID()
	case rating.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RatingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rating.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case rating.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTopicID(v)
		return nil
	case rating.FieldRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown Rating numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RatingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RatingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RatingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rating nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RatingMutation) ResetField(name string) error {
	switch name {
	case rating.FieldUserID:
		m.ResetUserID()
		return nil
	case rating.FieldTopicID:
		m.ResetTopicID()
		return nil
	case rating.FieldRating:
		m.ResetRating()
		return nil
	case rating.FieldComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown Rating field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RatingMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.ratedBy != nil {
		edges = append(edges, rating.EdgeRatedBy)
	}
	if m.underTopicOf != nil {
		edges = append(edges, rating.EdgeUnderTopicOf)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RatingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rating.EdgeRatedBy:
		if id := m.ratedBy; id != nil {
			return []ent.Value{*id}
		}
	case rating.EdgeUnderTopicOf:
		if id := m.underTopicOf; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RatingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RatingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RatingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedratedBy {
		edges = append(edges, rating.EdgeRatedBy)
	}
	if m.clearedunderTopicOf {
		edges = append(edges, rating.EdgeUnderTopicOf)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RatingMutation) EdgeCleared(name string) bool {
	switch name {
	case rating.EdgeRatedBy:
		return m.clearedratedBy
	case rating.EdgeUnderTopicOf:
		return m.clearedunderTopicOf
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RatingMutation) ClearEdge(name string) error {
	switch name {
	case rating.EdgeRatedBy:
		m.ClearRatedBy()
		return nil
	case rating.EdgeUnderTopicOf:
		m.ClearUnderTopicOf()
		return nil
	}
	return fmt.Errorf("unknown Rating unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RatingMutation) ResetEdge(name string) error {
	switch name {
	case rating.EdgeRatedBy:
		m.ResetRatedBy()
		return nil
	case rating.EdgeUnderTopicOf:
		m.ResetUnderTopicOf()
		return nil
	}
	return fmt.Errorf("unknown Rating edge %s", name)
}

// TopicMutation represents an operation that mutates the Topic nodes in the graph.
type TopicMutation struct {
	config
	op              Op
	typ             string
	id              *int
	topic_name      *string
	clearedFields   map[string]struct{}
	analysis        *int
	clearedanalysis bool
	ratings         map[int]struct{}
	removedratings  map[int]struct{}
	clearedratings  bool
	done            bool
	oldValue        func(context.Context) (*Topic, error)
	predicates      []predicate.Topic
}

var _ ent.Mutation = (*TopicMutation)(nil)

// topicOption allows management of the mutation configuration using functional options.
type topicOption func(*TopicMutation)

// newTopicMutation creates new mutation for the Topic entity.
func newTopicMutation(c config, op Op, opts ...topicOption) *TopicMutation {
	m := &TopicMutation{
		config:        c,
		op:            op,
		typ:           TypeTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTopicID sets the ID field of the mutation.
func withTopicID(id int) topicOption {
	return func(m *TopicMutation) {
		var (
			err   error
			once  sync.Once
			value *Topic
		)
		m.oldValue = func(ctx context.Context) (*Topic, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Topic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTopic sets the old Topic of the mutation.
func withTopic(node *Topic) topicOption {
	return func(m *TopicMutation) {
		m.oldValue = func(context.Context) (*Topic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Topic entities.
func (m *TopicMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TopicMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TopicMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Topic.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTopicName sets the "topic_name" field.
func (m *TopicMutation) SetTopicName(s string) {
	m.topic_name = &s
}

// TopicName returns the value of the "topic_name" field in the mutation.
func (m *TopicMutation) TopicName() (r string, exists bool) {
	v := m.topic_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicName returns the old "topic_name" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldTopicName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopicName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopicName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicName: %w", err)
	}
	return oldValue.TopicName, nil
}

// ResetTopicName resets all changes to the "topic_name" field.
func (m *TopicMutation) ResetTopicName() {
	m.topic_name = nil
}

// SetAnalysisID sets the "analysis" edge to the Analysis entity by id.
func (m *TopicMutation) SetAnalysisID(id int) {
	m.analysis = &id
}

// ClearAnalysis clears the "analysis" edge to the Analysis entity.
func (m *TopicMutation) ClearAnalysis() {
	m.clearedanalysis = true
}

// AnalysisCleared reports if the "analysis" edge to the Analysis entity was cleared.
func (m *TopicMutation) AnalysisCleared() bool {
	return m.clearedanalysis
}

// AnalysisID returns the "analysis" edge ID in the mutation.
func (m *TopicMutation) AnalysisID() (id int, exists bool) {
	if m.analysis != nil {
		return *m.analysis, true
	}
	return
}

// AnalysisIDs returns the "analysis" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AnalysisID instead. It exists only for internal usage by the builders.
func (m *TopicMutation) AnalysisIDs() (ids []int) {
	if id := m.analysis; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAnalysis resets all changes to the "analysis" edge.
func (m *TopicMutation) ResetAnalysis() {
	m.analysis = nil
	m.clearedanalysis = false
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by ids.
func (m *TopicMutation) AddRatingIDs(ids ...int) {
	if m.ratings == nil {
		m.ratings = make(map[int]struct{})
	}
	for i := range ids {
		m.ratings[ids[i]] = struct{}{}
	}
}

// ClearRatings clears the "ratings" edge to the Rating entity.
func (m *TopicMutation) ClearRatings() {
	m.clearedratings = true
}

// RatingsCleared reports if the "ratings" edge to the Rating entity was cleared.
func (m *TopicMutation) RatingsCleared() bool {
	return m.clearedratings
}

// RemoveRatingIDs removes the "ratings" edge to the Rating entity by IDs.
func (m *TopicMutation) RemoveRatingIDs(ids ...int) {
	if m.removedratings == nil {
		m.removedratings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ratings, ids[i])
		m.removedratings[ids[i]] = struct{}{}
	}
}

// RemovedRatings returns the removed IDs of the "ratings" edge to the Rating entity.
func (m *TopicMutation) RemovedRatingsIDs() (ids []int) {
	for id := range m.removedratings {
		ids = append(ids, id)
	}
	return
}

// RatingsIDs returns the "ratings" edge IDs in the mutation.
func (m *TopicMutation) RatingsIDs() (ids []int) {
	for id := range m.ratings {
		ids = append(ids, id)
	}
	return
}

// ResetRatings resets all changes to the "ratings" edge.
func (m *TopicMutation) ResetRatings() {
	m.ratings = nil
	m.clearedratings = false
	m.removedratings = nil
}

// Where appends a list predicates to the TopicMutation builder.
func (m *TopicMutation) Where(ps ...predicate.Topic) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TopicMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Topic).
func (m *TopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TopicMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.topic_name != nil {
		fields = append(fields, topic.FieldTopicName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldTopicName:
		return m.TopicName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case topic.FieldTopicName:
		return m.OldTopicName(ctx)
	}
	return nil, fmt.Errorf("unknown Topic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case topic.FieldTopicName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicName(v)
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TopicMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TopicMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Topic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TopicMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TopicMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Topic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TopicMutation) ResetField(name string) error {
	switch name {
	case topic.FieldTopicName:
		m.ResetTopicName()
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.analysis != nil {
		edges = append(edges, topic.EdgeAnalysis)
	}
	if m.ratings != nil {
		edges = append(edges, topic.EdgeRatings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TopicMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case topic.EdgeAnalysis:
		if id := m.analysis; id != nil {
			return []ent.Value{*id}
		}
	case topic.EdgeRatings:
		ids := make([]ent.Value, 0, len(m.ratings))
		for id := range m.ratings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedratings != nil {
		edges = append(edges, topic.EdgeRatings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TopicMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case topic.EdgeRatings:
		ids := make([]ent.Value, 0, len(m.removedratings))
		for id := range m.removedratings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedanalysis {
		edges = append(edges, topic.EdgeAnalysis)
	}
	if m.clearedratings {
		edges = append(edges, topic.EdgeRatings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TopicMutation) EdgeCleared(name string) bool {
	switch name {
	case topic.EdgeAnalysis:
		return m.clearedanalysis
	case topic.EdgeRatings:
		return m.clearedratings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TopicMutation) ClearEdge(name string) error {
	switch name {
	case topic.EdgeAnalysis:
		m.ClearAnalysis()
		return nil
	}
	return fmt.Errorf("unknown Topic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TopicMutation) ResetEdge(name string) error {
	switch name {
	case topic.EdgeAnalysis:
		m.ResetAnalysis()
		return nil
	case topic.EdgeRatings:
		m.ResetRatings()
		return nil
	}
	return fmt.Errorf("unknown Topic edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	email          *string
	clearedFields  map[string]struct{}
	ratings        map[int]struct{}
	removedratings map[int]struct{}
	clearedratings bool
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by ids.
func (m *UserMutation) AddRatingIDs(ids ...int) {
	if m.ratings == nil {
		m.ratings = make(map[int]struct{})
	}
	for i := range ids {
		m.ratings[ids[i]] = struct{}{}
	}
}

// ClearRatings clears the "ratings" edge to the Rating entity.
func (m *UserMutation) ClearRatings() {
	m.clearedratings = true
}

// RatingsCleared reports if the "ratings" edge to the Rating entity was cleared.
func (m *UserMutation) RatingsCleared() bool {
	return m.clearedratings
}

// RemoveRatingIDs removes the "ratings" edge to the Rating entity by IDs.
func (m *UserMutation) RemoveRatingIDs(ids ...int) {
	if m.removedratings == nil {
		m.removedratings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ratings, ids[i])
		m.removedratings[ids[i]] = struct{}{}
	}
}

// RemovedRatings returns the removed IDs of the "ratings" edge to the Rating entity.
func (m *UserMutation) RemovedRatingsIDs() (ids []int) {
	for id := range m.removedratings {
		ids = append(ids, id)
	}
	return
}

// RatingsIDs returns the "ratings" edge IDs in the mutation.
func (m *UserMutation) RatingsIDs() (ids []int) {
	for id := range m.ratings {
		ids = append(ids, id)
	}
	return
}

// ResetRatings resets all changes to the "ratings" edge.
func (m *UserMutation) ResetRatings() {
	m.ratings = nil
	m.clearedratings = false
	m.removedratings = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ratings != nil {
		edges = append(edges, user.EdgeRatings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRatings:
		ids := make([]ent.Value, 0, len(m.ratings))
		for id := range m.ratings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedratings != nil {
		edges = append(edges, user.EdgeRatings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRatings:
		ids := make([]ent.Value, 0, len(m.removedratings))
		for id := range m.removedratings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedratings {
		edges = append(edges, user.EdgeRatings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRatings:
		return m.clearedratings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRatings:
		m.ResetRatings()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
