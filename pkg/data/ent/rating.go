// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/rating"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/topic"
	"github.com/mizumoto-cn/ratingo/pkg/data/ent/user"
)

// Rating is the model entity for the Rating schema.
type Rating struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating float64 `json:"rating,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RatingQuery when eager-loading is set.
	Edges         RatingEdges `json:"edges"`
	topic_ratings *int
	user_ratings  *int
}

// RatingEdges holds the relations/edges for other nodes in the graph.
type RatingEdges struct {
	// RatedBy holds the value of the ratedBy edge.
	RatedBy *User `json:"ratedBy,omitempty"`
	// UnderTopicOf holds the value of the underTopicOf edge.
	UnderTopicOf *Topic `json:"underTopicOf,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RatedByOrErr returns the RatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RatingEdges) RatedByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.RatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.RatedBy, nil
	}
	return nil, &NotLoadedError{edge: "ratedBy"}
}

// UnderTopicOfOrErr returns the UnderTopicOf value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RatingEdges) UnderTopicOfOrErr() (*Topic, error) {
	if e.loadedTypes[1] {
		if e.UnderTopicOf == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: topic.Label}
		}
		return e.UnderTopicOf, nil
	}
	return nil, &NotLoadedError{edge: "underTopicOf"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rating) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rating.FieldRating:
			values[i] = new(sql.NullFloat64)
		case rating.FieldID, rating.FieldUserID, rating.FieldTopicID:
			values[i] = new(sql.NullInt64)
		case rating.FieldComment:
			values[i] = new(sql.NullString)
		case rating.ForeignKeys[0]: // topic_ratings
			values[i] = new(sql.NullInt64)
		case rating.ForeignKeys[1]: // user_ratings
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Rating", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rating fields.
func (r *Rating) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rating.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rating.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = int(value.Int64)
			}
		case rating.FieldTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				r.TopicID = int(value.Int64)
			}
		case rating.FieldRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				r.Rating = value.Float64
			}
		case rating.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				r.Comment = value.String
			}
		case rating.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field topic_ratings", value)
			} else if value.Valid {
				r.topic_ratings = new(int)
				*r.topic_ratings = int(value.Int64)
			}
		case rating.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_ratings", value)
			} else if value.Valid {
				r.user_ratings = new(int)
				*r.user_ratings = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRatedBy queries the "ratedBy" edge of the Rating entity.
func (r *Rating) QueryRatedBy() *UserQuery {
	return (&RatingClient{config: r.config}).QueryRatedBy(r)
}

// QueryUnderTopicOf queries the "underTopicOf" edge of the Rating entity.
func (r *Rating) QueryUnderTopicOf() *TopicQuery {
	return (&RatingClient{config: r.config}).QueryUnderTopicOf(r)
}

// Update returns a builder for updating this Rating.
// Note that you need to call Rating.Unwrap() before calling this method if this Rating
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rating) Update() *RatingUpdateOne {
	return (&RatingClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Rating entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rating) Unwrap() *Rating {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rating is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rating) String() string {
	var builder strings.Builder
	builder.WriteString("Rating(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("topic_id=")
	builder.WriteString(fmt.Sprintf("%v", r.TopicID))
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", r.Rating))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(r.Comment)
	builder.WriteByte(')')
	return builder.String()
}

// Ratings is a parsable slice of Rating.
type Ratings []*Rating

func (r Ratings) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
