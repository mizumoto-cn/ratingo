// Code generated by ent, DO NOT EDIT.

package rating

const (
	// Label holds the string label denoting the rating type in the database.
	Label = "rating"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTopicID holds the string denoting the topic_id field in the database.
	FieldTopicID = "topic_id"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// EdgeRatedBy holds the string denoting the ratedby edge name in mutations.
	EdgeRatedBy = "ratedBy"
	// EdgeUnderTopicOf holds the string denoting the undertopicof edge name in mutations.
	EdgeUnderTopicOf = "underTopicOf"
	// Table holds the table name of the rating in the database.
	Table = "ratings"
	// RatedByTable is the table that holds the ratedBy relation/edge.
	RatedByTable = "ratings"
	// RatedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RatedByInverseTable = "users"
	// RatedByColumn is the table column denoting the ratedBy relation/edge.
	RatedByColumn = "user_ratings"
	// UnderTopicOfTable is the table that holds the underTopicOf relation/edge.
	UnderTopicOfTable = "ratings"
	// UnderTopicOfInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	UnderTopicOfInverseTable = "topics"
	// UnderTopicOfColumn is the table column denoting the underTopicOf relation/edge.
	UnderTopicOfColumn = "topic_ratings"
)

// Columns holds all SQL columns for rating fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTopicID,
	FieldRating,
	FieldComment,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ratings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"topic_ratings",
	"user_ratings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
